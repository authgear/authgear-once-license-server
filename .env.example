# Origins that are allowed to call the license server.
AUTHGEAR_ONCE_CORS_ALLOWED_ORIGINS=

# Sentry SDN.
AUTHGEAR_ONCE_SENTRY_SDN=

# Stripe related configurations. They should be self-explanatory.
AUTHGEAR_ONCE_STRIPE_SECRET_KEY=sk_test_foobar
AUTHGEAR_ONCE_STRIPE_CHECKOUT_SESSION_SUCCESS_URL=https://www.authgear.com/payment-confirmed
AUTHGEAR_ONCE_STRIPE_CHECKOUT_SESSION_CANCEL_URL=https://www.authgear.com/payment-unsuccessful
AUTHGEAR_ONCE_STRIPE_CHECKOUT_SESSION_PRICE_ID=price_foobar
AUTHGEAR_ONCE_STRIPE_WEBHOOK_SIGNING_SECRET=whsec_foobar

# SMTP related cnfigurations.
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=username
SMTP_PASSWORD=password
SMTP_SENDER=user@example.com

# The URL scheme to generate a public-facing URL.
# When unset, the default is https.
AUTHGEAR_ONCE_PUBLIC_URL_SCHEME=https

# The Go template to generate an URL to download the authgear-once command.
# The template is rendered with Uname_s and Uname_m.
AUTHGEAR_ONCE_BINARY_DOWNLOAD_URL_GO_TEMPLATE='https://authgear.com?uname_s={{ $.Uname_s }}&uname_m={{ $.Uname_m }}'
AUTHGEAR_ONCE_KEYGEN_ADMIN_TOKEN=
AUTHGEAR_ONCE_KEYGEN_PRODUCT_ID=
AUTHGEAR_ONCE_KEYGEN_POLICY_ID=

## These 3 variables are read by the image "postgres"
POSTGRES_USER=authgearonce
POSTGRES_PASSWORD=$(openssl rand -hex 32)
POSTGRES_DB=authgearonce

## These variables are read by keygen

KEYGEN_EDITION="CE"
KEYGEN_MODE="singleplayer"

# KEYGEN_ACCOUNT_ID is required when KEYGEN_MODE=singleplayer (the default)
# It MUST BE a UUID.
# Note that the UUID must be in lowercase.
# It is because keygen use a simple string comparison to match the expected account ID in singleplayer mode.
# See https://github.com/keygen-sh/keygen-api/blob/fb819b5b627f984387a236e3da79eb1597af3ead/app/services/resolve_account_service.rb#L21
# The UUID returned by Postgres is in lowercase so if the environment variable is in uppercase, the comparison never result in true.
KEYGEN_ACCOUNT_ID=$(uuidgen | tr A-Z a-z)

DATABASE_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB"
REDIS_URL=redis://redis:6379/0

# KEYGEN_HOST is required to tell what the expected host is.
# KEYGEN_DOMAIN and KEYGEN_SUBDOMAIN are used to constraint routing.
# See https://github.com/keygen-sh/keygen-api/blob/c73f7b01239d19064bef19f32b4dda04398e1eb7/config/routes.rb#L7
# If KEYGEN_DOMAIN and KEYGEN_SUBDOMAIN are not given, then it is derived from KEYGEN_HOST.
# Since KEYGEN_HOST is localhost, it has no subdomain, the derivation will fail in a way that all requests will result in 404.
# So we need to explicitly set KEYGEN_DOMAIN and KEYGEN_SUBDOMAIN.
KEYGEN_HOST=localhost
KEYGEN_DOMAIN=localhost
KEYGEN_SUBDOMAIN=

# KEYGEN_ADMIN_EMAIL sets up the admin account.
KEYGEN_ADMIN_EMAIL=user@example.com

# KEYGEN_ADMIN_PASSWORD is the password for KEYGEN_ADMIN_EMAIL
KEYGEN_ADMIN_PASSWORD=$(openssl rand -hex 32)

# SECRET_KEY_BASE is a variable used by Ruby on Rails.
# See https://api.rubyonrails.org/classes/Rails/Application.html#method-i-secret_key_base
SECRET_KEY_BASE=$(openssl rand -hex 32)

# The following are used by Active Record.
# See https://guides.rubyonrails.org/active_record_encryption.html
ENCRYPTION_DETERMINISTIC_KEY=$(openssl rand -hex 32)
ENCRYPTION_PRIMARY_KEY=$(openssl rand -hex 32)
ENCRYPTION_KEY_DERIVATION_SALT=$(openssl rand -hex 32)
